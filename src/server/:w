import uuid from 'uuid/v4'


const noop = _=>{}
let reportObserved = noop


const data = {
  hello: {'#': 34},
  '34': {what: {'#': 35 }},
  '35': {is: 'up'},
}

function reportChanged(key) {

}

function converter(data) {
  for (const key in data) {
    let val = data[key]
    Object.defineProperty(data, key, {
      get() {
        reportObserved(key)
        return val
      },
      set(newVal) {
        reportChanged(key)
        data[key] = val = newVal
        return newVal
      }
    })
  }
}

const callbacks = {}
const keysToCbs = {}
const cbsToKeys = {}
const subscriptions = {}
const cbsToSubs = {}

export function attach({server, filePath, startData}) {
  var io = require('socket.io')(server, { path: '/obdb' })
  io.on('connection', socket => {
    socket.on('subscribe', ([path, id]) => {
      const disposer = autorun(() => {
        const subscription = subscriptions[id] = {}
        let cur = data
        subscription[path[0]] = data[path[0]]
        for (let i = 0; i < path.length; i++) {
          cur = (cur[path[i]] || (cur[path[i]] = {}))
          if (cur && Object.keys(cur) == '#') {
            cur = subscription[cur['#']] = data[cur['#']]
          }
        }
        getTree(cur, subscription)
        socket.emit('return', [subscription, id, path[0]])
      })
    })
  })
}

export function getTree(obj, subscription) {
  for (const key in obj) {
    const cur = obj[key]
    if (cur && Object.keys(cur) == '#') {
      getTree(subscription[cur['#']] = data[cur['#']], subscription)
    }
  }
}

export function autorun(cb) {
  const cbId = uuid()
  callbacks[cbId] = cb
  observe(cb, cbId)
  return () => {
  for (const key in cbsToKeys[cbId])
    delete keysToCbs[cbId][key]
  }
}


export function observe(cb, cbId) {
  const prevReportObserved = reportObserved
  for (const key in cbsToKeys[cbId])
    keysToCbs[cbId][key] = false
  cbsToKeys[cbId] = {}
  reportObserved = key => {
    ;(keysToCbs[key] || (keysToCbs[key] = {}))[cbId] = true
    cbsToKeys[cbId][key] = true
    prevReportObserved(key)
  }
  cb()
  reportObserved = prevReportObserved
}
